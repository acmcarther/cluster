apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: 'nginx'
    component: 'controller'
  name: 'nginx-controller'
spec:
  replicas: 1
  template:
    metadata:
      annotations: {}
      labels:
        app: 'nginx'
        component: 'controller'
    spec:
      containers:
        - name: 'nginx-controller'
          image: 'gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.15'
          imagePullPolicy: 'IfNotPresent'
          args:
            - /nginx-ingress-controller
            - --default-backend-service=default/nginx-default-backend
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=default/nginx-controller
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: stats
              containerPort: 18080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          resources: {}
        - name: 'nginx-stats-exporter'
          image: 'sophos/nginx-vts-exporter:v0.6'
          imagePullPolicy: 'IfNotPresent'
          env:
            - name: METRICS_ADDR
              value: ":9913"
            - name: METRICS_ENDPOINT
              value: '/metrics'
            - name: METRICS_NS
              value: 'nginx'
            - name: NGINX_STATUS
              value: 'http://localhost:18080/nginx_status/format/json'
          ports:
            - name: metrics
              containerPort: 9913
              protocol: TCP
          resources:
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 10m
              memory: 20Mi
      hostNetwork: false
      nodeSelector: {}
      tolerations: []
      serviceAccountName: 'nginx'
      terminationGracePeriodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: 'nginx'
    component: 'controller'
  name: 'nginx-controller-metrics'
spec:
  ports:
    - name: metrics
      port: 9913
      targetPort: 9913
  selector:
    app: 'nginx'
    component: 'controller'
  type: 'ClusterIP'
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app:  'nginx'
    component: 'controller'
  name: 'nginx-controller'
spec:
  loadBalancerSourceRanges:
  externalTrafficPolicy: ''
  healthCheckNodePort: 0
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
      nodePort: 32080
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
      nodePort: 32443
  selector:
    app: 'nginx'
    component: 'controller'
  type: 'NodePort'
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: 'nginx'
    component: 'controller'
  name: 'nginx-controller-stats'
spec:
  ports:
    - name: stats
      port: 18080
      targetPort: 18080
  selector:
    app: 'nginx'
    component: 'controller'
  type: 'ClusterIP'
